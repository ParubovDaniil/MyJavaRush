 Если вы объявили переменную-класса (поле класса) или статическую переменную-класса,
 и не присвоили ей никакого значения, она инициализируется значением по умолчанию.
 Список таких значений приведен в таблице.

Типы byte, short, char всегда преобразовываются в тип int при взаимодействии между собой.
Не зря же тип int считается стандартным целочисленным типом.

Параметры в методы Java передаются по значению. Просто в случае с ссылочными переменными это значение — ссылка.
Значения прямо внутри переменных хранят только примитивные типы, все остальные типы хранят только ссылку на объект.

ОБЪЕКТ
Объект — это сгруппированные вместе данные и методы для того, чтобы эти данные обрабатывать.
Когда мы говорим о данных, имеем в виду переменные, конечно.
Про переменные объекта говорят, что это «данные объекта» или «состояние объекта».
Про методы объекта говорят: это «поведение объекта».
Состояние объекта (переменные объекта) принято менять только с помощью методов того же объекта.
Менять переменные объекта напрямую (не через методы объекта) считается дурным тоном.


Опробовали много подходов, и на основе лучших практик сформулировали 4 принципа ООП.
Это: абстракция, инкапсуляция, наследование и полиморфизм.
Раньше их было только три, но потом решили добавить еще и абстракцию.


АБСТРАКЦИЯ
Абстракция — это использование только тех характеристик объекта, которые с достаточной точностью представляют его в программе.
Основная идея состоит в том, чтобы представить объект минимальным набором полей и методов
и при этом с достаточной точностью для решаемой задачи.
В языке программирования Java абстракция осуществляется через использование абстрактных классов и интерфейсов.
Абстракция – отвлечение от целостности объекта и выделение его главных свойств и составляющих, нужных нам.
С точки зрения же программирования, абстракция — это, скажем так, правильное разделение программы на объекты.
Обычно любую большую программу можно десятками способов представить в виде взаимодействующих объектов.
Абстракция позволяет отобрать главные характеристики и опустить второстепенные.


ИНКАПСУЛЯЦИЯ
Цель инкапсуляции — улучшить качество взаимодействия вещей за счет их упрощения.
С точки зрения программирования, инкапсуляция — это «сокрытие реализации».
Мне нравится такое определение. Наш класс может содержать сотни методов и реализовывать
очень сложное поведение в различных ситуациях. Но мы можем скрыть от посторонних глаз все его методы
(пометить модификатором private), а для взаимодействия с другими классами оставить всего пару-тройку методов
(пометить их модификатором public).
Тогда все остальные классы нашей программы будут видеть в этом классе всего три метода и вызывать именно их.
А все сложности будут скрыты внутри класса, как кабина пилотов от счастливых пассажиров.


НАСЛЕДОВАНИЕ
С точки зрения программирования, наследование — это специальное отношение между двумя классами.
Новый класс становится потомком (наследником) уже существующего.
Это очень выгодно, когда есть класс, который содержит 80%-90% нужных нам данных и методов.
Мы просто объявляем подходящий класс родителем нашего нового класса,
и в новом классе автоматически появляются все данные и методы класса-родителя.


ПОЛИМОРФИЗМ
Если вернуться к программированию, то полиморфизм позволяет единообразно обращаться
к объектам различных классов (обычно имеющих общего предка) — вещь, которую трудно переоценить.
Ценность его тем выше, чем больше программа.

ООП — это принципы. Внутренние законы.
Каждый из них нас в чем-то ограничивает, давая взамен большие преимущества, когда программа вырастает до больших размеров.
Четыре принципа ООП — это как четыре ножки стула.
Убери хотя бы одну, и вся система станет неустойчивой.


Константы позволяют защитить переменные от изменений, но не в состоянии
защитить от изменений объекты, на которые эти переменные ссылаются.